scalar DateTime
scalar EmailAddress
scalar PhoneNumber

type Query {
  clubs: [Club!]!
  club(id: ID!): Club
  clubByDomain(domain: String!): Club
  activity(id: ID!): Activity
  user(id: ID!): User
  me: Me
  userPrivateData(userId: ID!, type: String!): String!
}

type Mutation {
  # createClub(name: String!): Club!
  # createUser(name: String!, email: EmailAddress!, phone: PhoneNumber!): User!
  # createActivity(clubId: ID!, date: DateTime!, type: ActivityType!): Activity!
  participate(activityId: ID!, userId: ID!, type: ParticipationType!): ActivityParticipation!
  updateProfile(userId: ID!, input: ProfileInput!): UserFull!
}

type Club {
  id: ID!
  domain: String!
  name: String!
  members: [User!]!
  activities: [Activity!]!
  recurrences: [Recurrence!]!

  agenda: Agenda!
}

type Agenda {
  activities: [Activity!]!
  participants: [User!]!
}

type User {
  id: ID!
  name: String!
}

type UserFull {
  id: ID!
  name: String!
  email: EmailAddress!
  phone: PhoneNumber!
  domain: String
  notifications: [ActivityType!]!
}

type Me {
  id: ID!
  name: String
  email: EmailAddress!
  phone: PhoneNumber
  domain: String
  notifications: [ActivityType!]!
}

type Activity {
  id: ID!
  title: String
  description: String
  date: DateTime!
  type: ActivityType!
  recurring: Boolean
  participations: [ActivityParticipation!]!
}

type Recurrence {
  id: ID!
  title: String
  description: String
  type: ActivityType!
  start: DateTime!
  end: DateTime
  pattern: RecurrencePattern
}

type RecurrencePattern {
  day: Day,
  hour: Int,
  minutes: Int
}

type ActivityParticipation {
  participant: User!
  type: ParticipationType!
}

input ProfileInput {
  name: String!
  phone: PhoneNumber!
  notifications: [ActivityType!]
}

enum ActivityType {
  kmer,
  piscine,
  eauVive,
  slalom,
  musculation
}

enum ParticipationType {
  oui
  peutEtre
  non
  nonRepondu
  coordinator
  security
}


enum Day {
  Sunday,
  Monday,
  Tuesday,
  Wednesday,
  Thursday,
  Friday,
  Saturday,
}