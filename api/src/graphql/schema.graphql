scalar DateTime
scalar EmailAddress
scalar PhoneNumber

type Query {
  clubs: [Club!]!
  club(id: ID!): Club
  clubByDomain(domain: String!): Club
  activity(id: ID!): Activity
  article(id: ID!): Article
  user(id: ID!): User
  me: Me
  userPrivateData(userId: ID!, type: String!): String!
}

type Mutation {
  # createClub(name: String!): Club!
  # createUser(name: String!, email: EmailAddress!, phone: PhoneNumber!): User!
  createActivity(clubId: ID!, input: ActivityInput!): Activity!
  createArticle(clubId: ID!, input: ArticleInput!): Article!
  participate(activityId: ID!, userId: ID!, type: ParticipationType!): ActivityParticipation!
  updateProfile(userId: ID!, input: ProfileInput!): UserFull!
  updateActivity(activityId: ID!, input: ActivityInput!): Activity!
  updateArticle(articleId: ID!, input: ArticleInput!): Article!
}

type Club {
  id: ID!
  domains: [String!]!
  name: String!
  members: [User!]!
  activities: [Activity!]!
  recurrences: [Recurrence!]!
  articles: [Article!]!

  agenda: Agenda!
}

type Agenda {
  activities: [Activity!]!
  participants: [User!]!
}

type User {
  id: ID!
  name: String!
  paddles: [Paddle!]!
}

type UserFull {
  id: ID!
  name: String!
  email: EmailAddress!
  phone: PhoneNumber!
  clubs: [Club!]!
  notifications: [ActivityType!]!
  paddles: [Paddle!]!
}

type Me {
  id: ID!
  name: String
  email: EmailAddress!
  phone: PhoneNumber
  clubs: [Club!]!
  notifications: [ActivityType!]!
  paddles: [Paddle!]!
}

type Activity {
  id: ID!
  title: String
  description: String
  status: ActivityStatus
  start: DateTime!
  end: DateTime!
  type: ActivityType!
  recurring: Boolean
  participations: [ActivityParticipation!]!
  limit: Int
  coordinators: [ID!]!
  iCanEdit: Boolean!
}

type Recurrence {
  id: ID!
  title: String
  description: String
  status: ActivityStatus
  type: ActivityType!
  start: DateTime!
  end: DateTime
  pattern: RecurrencePattern
}

type RecurrencePattern {
  day: Day,
  hour: Int,
  minutes: Int
}

type ActivityParticipation {
  participant: User!
  type: ParticipationType!
  lastUpdate: DateTime!
}

type Article {
  id: ID!
  title: String!
  author: User!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  iCanEdit: Boolean!
}

type Paddle {
  activityType: String!
  color: String!
}

input ProfileInput {
  name: String!
  phone: PhoneNumber!
  notifications: [ActivityType!]
  paddles: [PaddleInput!]
}

input PaddleInput {
  activityType: String!
  color: String!
}

input ActivityInput {
  title: String!
  description: String!
  status: ActivityStatus!
  start: DateTime!
  end: DateTime!
  type: ActivityType!
  limit: Int
}

input ArticleInput {
  title: String!
  content: String!
}

enum ActivityType {
  kmer,
  piscine,
  eauVive,
  slalom,
  dragonBoat,
  musculation,
  autres,
}

enum ActivityStatus {
  draft,
  published,
  canceled,
}

# enum ActivityInscriptionStatus {
#   open,
#   waitingList,
#   closed,
# }

enum ParticipationType {
  oui
  peutEtre
  non
  nonRepondu
  coordinator
  security
}


enum Day {
  Sunday,
  Monday,
  Tuesday,
  Wednesday,
  Thursday,
  Friday,
  Saturday,
}